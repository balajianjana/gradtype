!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=["I should not be sorry to see you disgraced, publicly disgraced","He turned round and, walking to the window, drew up the blind","The true mystery of the world is the visible, not the invisible","The common people who acted with me seemed to me to be godlike","Having locked the door behind him, he crept quietly downstairs","Success was given to the strong, failure thrust upon the weak","England is bad enough I know, and English society is all wrong","And I don't think it really matters about your not being there","It was the imagination that set remorse to dog the feet of sin","I was away with my love in a forest that no man had ever seen","As for being poisoned by a book, there is no such thing as that","The folk don't like to have that sort of thing in their houses","Modern morality consists in accepting the standard of one's age","The flower seemed to quiver, and then swayed gently to and fro","Every month as it wanes brings you nearer to something dreadful","She will represent something to you that you have never known","Our grandmothers painted in order to try and talk brilliantly","It would have made me in love with love for the rest of my life","It is the confession, not the priest, that gives us absolution","I want you to get rid of the dreadful people you associate with"].map(function(e){return e.replace(/\s/g,"␣").toLowerCase()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=/firefox/i.test(window.navigator.userAgent),r=o||void 0===window.performance?function(){return Date.now()}:function(){return window.performance.now()};function s(){return r()}t.now=s,t.detect=function(){if(!o)return!1;var e={};function t(t){var n=s();return function(t){for(var n=0;n<t;n++)void 0===e.x?e.x=0:e.x++}(t),s()-n}function n(e){for(var n=0,o=0;o<100;o++)n+=t(e);return n/100}for(var r=[],i=1;i<33554432;i*=1.1){var a=n(i);if(r.push(a),a>1)break}var u=[];for(i=r.length-1;i>=1;i--){var h=r[i],d=r[i-1],l=h/1.1,c=Math.abs(l-d)/(l+1e-24);if(c>1)break;u.push(c)}return u.length/(r.length-1)>.5}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r=n(0),s="gradtype-survey-v1",i=["You're doing great!","Just few more!","Almost there!"],a=Math.floor(r.default.length)/(i.length+1);new(function(){function e(){var e=this;this.log=[],this.start=o.now(),this.elems={display:document.getElementById("display"),counter:document.getElementById("counter"),wrap:document.getElementById("wrap"),reassure:document.getElementById("reassure")},this.sentenceIndex=0,this.charIndex=0,this.lastReassure=0,window.localStorage&&window.localStorage.getItem(s)?this.complete():(this.displaySentence(),window.addEventListener("keydown",function(t){e.onKeyDown(t.key)},!0),window.addEventListener("keyup",function(t){e.onKeyUp(t.key)},!0))}return e.prototype.displaySentence=function(){var e=r.default[this.sentenceIndex];this.elems.counter.textContent=(r.default.length-this.sentenceIndex).toString(),this.elems.display.innerHTML="<span class=sentence-completed>"+e.slice(0,this.charIndex)+"</span><span class=sentence-pending>"+e.slice(this.charIndex)},e.prototype.nextSentence=function(){var e=this;if(this.charIndex=0,this.sentenceIndex++,this.log.push("r"),this.sentenceIndex-this.lastReassure>=a&&(this.lastReassure=this.sentenceIndex,this.elems.reassure.textContent=i.shift()||""),this.sentenceIndex===r.default.length)return this.elems.counter.textContent="0",void this.save(function(t,n){if(t)return e.error();e.complete(n)});this.displaySentence()},e.prototype.onKeyDown=function(e){var t=this,n=o.now();if(this.log.push({e:"d",ts:(n-this.start)/1e3,k:e}),this.sentenceIndex!==r.default.length){var s=r.default[this.sentenceIndex],i=s[this.charIndex];(e===i||" "===e&&"␣"===i)&&(this.charIndex++,this.displaySentence(),this.charIndex===s.length&&setTimeout(function(){t.nextSentence()},50))}},e.prototype.onKeyUp=function(e){var t=o.now();this.log.push({e:"u",ts:(t-this.start)/1e3,k:e})},e.prototype.save=function(e){var t=JSON.stringify(this.log);this.elems.wrap.innerHTML="<h1>Uploading, please do not close this window...</h1>";var n=new XMLHttpRequest;n.onload=function(){var t;try{t=JSON.parse(n.responseText)}catch(t){return e(t)}return t.code?e(void 0,t.code):e(new Error("No response code"))},n.onerror=function(t){return e(new Error("XHR error"))},n.open("PUT","https://gradtype-survey.darksi.de/",!0),n.setRequestHeader("Content-Type","application/json"),n.send(t)},e.prototype.complete=function(e){window.localStorage&&window.localStorage.setItem(s,"submitted");var t=this.elems.wrap;t.innerHTML=void 0===e?"<h1>Thank you for submitting survey!</h1>":'<h1>Thank you for submitting survey!</h1><h1 style="color:red">Your code is '+e+"</h1>"},e.prototype.error=function(){this.elems.wrap.innerHTML="<h1>Server error, please retry later!</h1>"},e}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,